{"body": "\nHi! <br/><br/>I want to optimize a single zone for energy and light metrics using octopus. Simple enough. The examples i find use a **single** window varying in size &amp; placement. I want there to be up to 3 windows on the same surface that do not overlap but vary individually.<br/><br/>All the solutions I can come up with involve either random placement or renaming the XZ placement plane in such a way that it would disrupt octopus from learning about the genome as the generations progress.\u00a0My last hand solution is making a simple pixel grid, but making this work unfortunately allows for an unlimited number of windows.<br/><br/>Im sure this problem has been tackled before, so I'm putting it out here instead of inventing the wheel.. Thanks for ANY input!\n", "attachments": [], "created_by_name": "Ludvig Haav", "created_at": "January 31, 2016 at 4:15pm", "created_by": "LudvigNyman", "topic": "Placing multiple windows on facade for optimization", "replies": [{"body": "\nBtw, is this too off topic for this group? Im drifting away from talking about HB/LB components..\n", "attachments": [], "created_by_name": "Ludvig Haav", "created_at": "January 31, 2016 at 4:17pm", "created_by": "LudvigNyman", "replies": []}, {"body": "\nHi Ludvig,\n\nProblems similar to this have been studied before and there are a couple of solutions. You definitely don't want to go toward the random option. Back to the overlapping problem you can either merge the overlap windows or move them aside once they are overlapped and keep track of the distance from the base case as one of the objectives that you want to be minimized.\n\nDo you have any sketch of what you have in mind? and why there need to be 3 windows?\n\nMostapha\n", "attachments": [], "created_by_name": "Mostapha Sadeghipour Roudsari", "created_at": "January 31, 2016 at 5:19pm", "created_by": "MostaphaSadeghipour", "replies": []}, {"body": "\nA grid indeed seems the easiest way to start. I was thinking of using a similar technique for electrical lighting optimization with the new HB components.\n\n\n\nIn a definition I have, where I wanted to keep 2 geometries from overlapping what I did was similar to what Mostapha suggests. I measured for the distance between the two edges I wanted to keep apart and then set an if statement with the minimum distance I wanted. When that check failed, the false boolean was fed into the simulation component. When it passed the true was passed instead and the simulation would go on. In you case, given that the windows have a constant size and geometry, I'm sure you can find a formula to check the distance between the area centers (e.g. in a square min distance is x/2, etc.)\n\n\n\nNot sure if it is the most elegant of solutions but it seemed to work quite well. Furthermore, this check would limit substantially the number of alternatives you will be checking with Octopus.\u00a0\n", "attachments": [], "created_by_name": "Theodoros Galanos", "created_at": "January 31, 2016 at 6:30pm", "created_by": "TheodorosGalanos", "replies": [{"body": "\nI've decided to simplify things by just allow the 3 windows to move around in their individual bounding surfaces. It does not cause that many limitations in my case.\u00a0<br/><br/>Both of your propositions are interesting. And i have a connected question that has to do with them both; how to minimize computation time while not messing up the solution landscape. I have 4 sliders right now. Two for placement position and two for window size. Some values for window size are unnecessary in certain window placements as it would cause overlapping of surface boundary. I have several ways of dealing with this, all affecting the fitness landscape:<br/><br/>1. make certain slider positions create redundant values, i.e windows cant grow. octopus will be simulating some of those positions all the same. There are sadly no sliders with dynamic bounds to my knowledge, and if i were to use one Im not sure how it would confuse octopus - having genes vary outside its control.\n\n\n\n2. penalize overlapping by skipping simulation and assigning it values that gives it a \"bad spot\" in the solution space, much like Theodoros proposes. Saves computation time but I am worried about discontinuity of fitness landscape.\n\n\n\n3. Setting the overlap as an objective to be minimized, like Mostapha proposes. I imagine this works but would require a fair amount of simulations with overlapping windows. I guess it would be similar to the alternative 1 in terms of computation time.<br/><br/>4. Manually creating a list of all possible window position and sizes. Reducing the gene sliders to only 1 instead of 4. hmmm... what impact would that have? I have a feeling its not good.<br/><br/>What do you think?\n", "attachments": [], "created_by_name": "Ludvig Haav", "created_at": "February 2, 2016 at 7:46am", "created_by": "LudvigNyman", "replies": []}, {"body": "\nInteresting! I like number 2 but if you're fine with having boundaries what about something like this.\n\nEvaluate base surface based on UV (2 slide). Find closet point to edges and then remove one of them (1 slides). This will give you 3 different regions. Now you can assign glazing percentage for each window (3 slides). Total 6 slides and it will give you enough options. I didn't create the regions but here is the logic:\n\n[<img class=\"align-full\" src=\"http://api.ning.com:80/files/g3YV6mxuqssaR9zLotqRRx8UET5xkZtWYTEN7sOPnicWbAt4Qq9WDJ7V7D34bicFQsCsNpKDextFdcc-pn2a2kTgoOTpv1eM/create_3_glazing.png?width=721\" width=\"721\"/>](http://api.ning.com:80/files/g3YV6mxuqssaR9zLotqRRx8UET5xkZtWYTEN7sOPnicWbAt4Qq9WDJ7V7D34bicFQsCsNpKDextFdcc-pn2a2kTgoOTpv1eM/create_3_glazing.png)\n", "attachments": [], "created_by_name": "Mostapha Sadeghipour Roudsari", "created_at": "February 5, 2016 at 9:50pm", "created_by": "MostaphaSadeghipour", "replies": []}, {"body": "\nHi Mostapha,\n\n\n\nThanks for that, looks like a very nice way to do it!\n\n\n\n@Ludvig\n\n\n\nThought that this could possible be of interest to you.\n\n\n\nDanny's definition apparently places the windows and tests for a valid boundary between the wall (valid = no overlapp). He then stores the fitness of those boundaries only in the optimization process. Geometrically it seems close to what Mostapha is doing only taking an opposite route of creating windows first taking region after. I have to warn you I haven't tested it myself yet.\u00a0\n\n\n\nKind regards,\n\nTheodore.\n", "attachments": [], "created_by_name": "Theodoros Galanos", "created_at": "February 6, 2016 at 7:40pm", "created_by": "TheodorosGalanos", "replies": []}, {"body": "\nThanks for both of your input!\n\n\n\nI ended up only placing one window per surface for other reasons, but mostaphas solution\u00a0for multiple windows is saved for future use. its nifty.<br/><br/>In my fenestration algorithm I will always have instances where different genome create the same geometry. Unfortunately. Also, I\u00b4ve realized that octopus by nature wants to do multiple runs with the same genomes as generations progress. Now I am looking to build a database of simulation results tied to geometry. So that when octopus creates a genome --&gt; builds a geometry i will check this geometry and see if its been simulated before, and if it has I will supply this result to octopus, bypassing the simulation run. This should save time. I'm gonna try to do this with native components within GH. If anyone has done this or has an efficient way to do it, I\u00b4d be happy if you shared it. :) <br/><br/>It seems it would be a workflow that could save computing time in every case you have high computaional burden and discrete slider values.\n", "attachments": [], "created_by_name": "Ludvig Haav", "created_at": "March 10, 2016 at 6:19am", "created_by": "LudvigNyman", "replies": []}]}]}