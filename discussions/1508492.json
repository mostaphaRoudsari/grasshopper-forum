{"body": "\nHello,\n\nrecently I came across the problem of the non-convex casting surfaces when performing EnergyPlus analysis.\n\n[<img class=\"align-full\" src=\"http://api.ning.com:80/files/k8B0fL58gIu0SOd4b7ojVlVTVVCZXF2I7oWWkxn5OaoFuMfoYwX7iJf0OV8i54AbTmNGwflAmBuACcI5qf6lpwmlLY9VwZHl/01.jpg?width=750\" width=\"750\"/>](http://api.ning.com:80/files/k8B0fL58gIu0SOd4b7ojVlVTVVCZXF2I7oWWkxn5OaoFuMfoYwX7iJf0OV8i54AbTmNGwflAmBuACcI5qf6lpwmlLY9VwZHl/01.jpg)\n\n\n\nI checked out and I understood the problem was the exposed floors of the building model that were L shaped, so I understood EnergyPlus doesn't like that.\n\n[<img class=\"align-full\" src=\"http://api.ning.com:80/files/k8B0fL58gItCs2y6n73wSl1wf8DMnzc-PASDzCG-Axv8XYE0Gd95slCGuctoEAjOx38H6HlZMp9afLFbuSkfQaBgWI56h2IN/02.jpg?width=750\" width=\"750\"/>](http://api.ning.com:80/files/k8B0fL58gItCs2y6n73wSl1wf8DMnzc-PASDzCG-Axv8XYE0Gd95slCGuctoEAjOx38H6HlZMp9afLFbuSkfQaBgWI56h2IN/02.jpg)\n\n\n\nI had to remake the algorithm that generate the building model (in different variations) so that the exposed floors were always 4 sided convex surfaces and it worked fine for the energy simulations, but this algorithm or even a simple 3D model like this take longer time.\u00a0\n\n[<img class=\"align-full\" src=\"http://api.ning.com:80/files/k8B0fL58gIt3lH6EmkLdWElBJ4*lekSTYiTcovP1VOmO1BDKtMzWCMflA6QCPJsWMkwB9bSYIAcTUJoM*E3pTwUJczMd2*jz/03.jpg?width=750\" width=\"750\"/>](http://api.ning.com:80/files/k8B0fL58gIt3lH6EmkLdWElBJ4*lekSTYiTcovP1VOmO1BDKtMzWCMflA6QCPJsWMkwB9bSYIAcTUJoM*E3pTwUJczMd2*jz/03.jpg)\n\n\n\nSo the question is: is it possible you realize and include in Honeybee a component that automatically create convex surfaces from non-conves ones? Something similar the component that automatically split the building masses so\u00a0adjacent zones can have the same contact surface. Thank you!!!\n\n\n\nFrancesco\n\n\n\n\n", "attachments": [], "created_by_name": "Francesco De Luca", "created_at": "April 14, 2016 at 3:14am", "created_by": "FrancescoDeLuca", "topic": "EnergyPlus non-convex casting sufaces issue", "replies": [{"body": "\nHi Francesco, It's a great topic an I have been thinking about it. Yes it is possible an here is the solution if someone has the time to implement it into honeybee. We just need to check isconvex for surfaces with more than 3 points and break them down into surfaces while writing to energyplus.\n\nRead up to ccw: [https://www.toptal.com/python/computational-geometry-in-python-from...](https://www.toptal.com/python/computational-geometry-in-python-from-theory-to-implementation)\n\nHere is the python source code:\u00a0[https://github.com/crm416/point-location/blob/master/geo/shapes.py#...](https://github.com/crm416/point-location/blob/master/geo/shapes.py#L168-L182)\n", "attachments": [], "created_by_name": "Mostapha Sadeghipour Roudsari", "created_at": "April 14, 2016 at 6:58am", "created_by": "MostaphaSadeghipour", "replies": [{"body": "\nHello Mostapha, thank you for the quick reply. Ok then it is possible in some future release of HB there will be this new component or feature. Thank you!\n\n\n\nBest,\n\nFrancesco\n", "attachments": [], "created_by_name": "Francesco De Luca", "created_at": "April 16, 2016 at 1:44am", "created_by": "FrancescoDeLuca", "replies": []}, {"body": "\nHi Mostapha,\n\nI wrote some lines to capture what you shared. It does not seem to work. Can you please take a look?\u00a0\n\n\n\nThis is what I believe I need to figure out next;\n\n1. Order of vertces\u00a0in a surface. (CW or CCW)\n\n2. Sorting of vertces along a particular directions (CW or CCW)\n\n\n\nMay be, if I can figure these two, I can have some meaningful results.\n\n\n\nThanks,\n\nDevang\n\n\n", "attachments": [{"link": "http://www.grasshopper3d.com/group/ladybug/forum/attachment/download?id=2985220%3AUploadedFile%3A1686929", "name": "isConvex.gh"}], "created_by_name": "Devang Chauhan", "created_at": "February 7, 2017 at 5:39am", "created_by": "devang", "replies": []}]}, {"body": "\nNot sure if this will be helpful but here it goes.\n\n\n\nThe way to break a non-convex polygon to convex ones seems to be to eliminate reflex vertices. The problem of identifying these reflex vertices is solved, if I understand it correctly (thanks for that Mostapha it's cool!), by the CCW algorithm. If my visual memory doesn't fail me, it will always be the middle point (B) of the non-ccw triad of points of a polygon that will be the reflex vertice.\n\n\n\nTo remove it we could do something like what Bayazit has implemented here ([https://mpen.ca/406/bayazit](https://mpen.ca/406/bayazit))\n\n\n\n1. extend the edges of the reflex vertice I until they hit an edge (at points I1 and I2)\n\n2. if there are no vertices between I1 and I2 then create a new vertice in the centre of I1I2 and connect to that.\n\n3. if there is one or more vertices then connect to the closest one.\n\n\n\nIn Francesco's example, you can easily imagine how that works in the corner of the roofs. Actually, for Francesco I was thinking that maybe a postprocessing solution (splitting all convex surfaces with the segments formed from the corner of roof/floor) would be an ugly but faster solution.\n\n\u00a0\n\nIn any case, if we can 'look' for vertices in Rhino then the above should be straightforward. I might sit down and see how to code this in Python, maybe it could be my initiation o.o\u00a0\n\n\n\nKind regards,\n\nTheodore.\n", "attachments": [], "created_by_name": "Theodoros Galanos", "created_at": "April 17, 2016 at 9:31am", "created_by": "TheodorosGalanos", "replies": [{"body": "\nHi Theodore,\n\n\n\nHow are you going with this? I'd also be interested in writing a solution as I want to work on my geometry skills. As I understand it your solution should work but how do we find the reflex surfaces?\n", "attachments": [], "created_by_name": "Anton Szilasi", "created_at": "April 22, 2016 at 2:56pm", "created_by": "AntonSzilasi", "replies": []}, {"body": "\nHi Anton,\n\n\n\nI'm not really working on it atm. I think the way to find reflex vertices is through the CCW algorithm Mostapha shared. As I said, the middle vertex should be reflex if it is not a CCW triad of points. Perhaps the code in the site shared by Mostapha can work right away and just spit out any reflex vertex out of that in this way.\n\nThe next step which I'm not sure is the Rhinoscript required to find the intersections, check for a point in between, etc.\n\n\n\nKind regards,\n\nTheodore.\n", "attachments": [], "created_by_name": "Theodoros Galanos", "created_at": "April 22, 2016 at 7:51pm", "created_by": "TheodorosGalanos", "replies": []}]}]}