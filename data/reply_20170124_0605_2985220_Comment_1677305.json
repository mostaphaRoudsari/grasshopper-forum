{"body": "\nSounds exciting!\n\n\n\nI have some ideas for the simplification of future development, but I think they're more on the E+ side of the code and if the NREL team would agree to implement new features. I have no idea though how to communicate these ideas so it might be better to post it here first.\n\n\n\nI was wondering if it was possible for the the E+ team to have some sort of API to allow the simplification of creating/concatenating the lines required for the IDF files because although it's not extremely difficult to write the concatenation code in Python, I imagine that it can become tedious with all the copy-pasting and creating dictionaries for valid input.\n\n\n\nAt the same time, coders have to re-implement the exception handling that I imagine is already present in the IDF editor (i.e. when invalid values are entered, the boxes turn red).\u00a0\n\nFor example, for a component that has 'timestep' as an input, the developers might have to implement some code to make sure that the values are between 1 and 60; which happens to be a built in function of the IDF Editor.\n\n\n\nI think the current components are fine as they are, but sometimes, implementing some classes not yet present in HB from E+ can be tedious especially if the E+ class requires a lot of inputs.\n\n\n\n----------------\n\nIn pseudocode, I'm thinking of something like this: (maybe similar to the\u00a0**class RunIDF**\u00a0of Run E+ component?, but I'm not really sure)\n\n\n\n# write some sort of file with instructions to a batch file maybe? maybe the first line pertains to the class name\n\n# The rest may be comma separated values? One E+ object per line?\u00a0\n\n# For example, this data is sent:\n\n**Shadow Calculation**\n\n**Calculation Method,\u00a0AverageOverDaysInFrequency**\n\n**Calculation Frequency, 30**\n\n**<br/>**# Then the API returns the correctly formatted string ready to be written in the IDF file?\n\n# If the user has entered invalid input, then the API returns some error messages similar to how the boxes turn red inside the IDF editor\n\n\n\n\n\nSome advantages I can think of:\n\n- for example if the E+ version changes with changes to the ranges of valid inputs, none of the code has to be changed\n\n- if the E+ version changes with additional objects to previous classes, then minimal code changes?\u00a0\n\n\n\nI'm not sure though if this'd be difficult or tedious for the E+ team to implement, but I honestly think it that it'd make life easier for us. Not sure if this would be of any benefit to the E+ team though.\n", "attachments": [], "created_by_name": "Pin", "created_at": "January 24, 2017 at 06:05AM", "created_by": "Pin", "parent_id": "topic_1677014", "id": "reply_2985220_Comment_1677305"}